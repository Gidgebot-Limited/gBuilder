Function Initialize-Model {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Specify the name of the model.")]
        [string]$Name,
        [switch]$All,
        [switch]$Controller,
        [switch]$Factory,
        [switch]$Force,
        [switch]$Migration,
        [switch]$MorphPivot,
        [switch]$Policy,
        [switch]$Seed,
        [switch]$Pivot,
        [switch]$Resource,
        [switch]$Api,
        [switch]$Requests,
        [switch]$Test,
        [switch]$Pest,
        [switch]$PhpUnit
    )

    $options = @()
    if ($All) { $options += "--all" }
    if ($Controller) { $options += "--controller" }
    if ($Factory) { $options += "--factory" }
    if ($Force) { $options += "--force" }
    if ($Migration) { $options += "--migration" }
    if ($MorphPivot) { $options += "--morph-pivot" }
    if ($Policy) { $options += "--policy" }
    if ($Seed) { $options += "--seed" }
    if ($Pivot) { $options += "--pivot" }
    if ($Resource) { $options += "--resource" }
    if ($Api) { $options += "--api" }
    if ($Requests) { $options += "--requests" }
    if ($Test) { $options += "--test" }
    if ($Pest) { $options += "--pest" }
    if ($PhpUnit) { $options += "--phpunit" }

    $command = "php artisan make:model $Name $options"
    Invoke-Expression $command
}
Function Update-Model {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false, HelpMessage = "Specify the path where the model file should be created/updated.")]
        [string]$Path = "app\Models",
        [Parameter(Mandatory = $true, HelpMessage = "Specify the DataObject instance.")]
        [DataObject]$Object
    )

    # Define the content for the model file
    $content = @"
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class $($Object.Name) extends Model
{
    protected \$table = '$($Object.TableName)';

    protected \$fillable = [
        $($Object.Fields.ForEach({ "'$($_.Name)'," }) -join "`n        ")
    ];

    $($Object.Methods.ForEach({ "
    public function $($_.Name)() {
        return '$($_.Content)';
    }" }) -join "`n    ")
}
"@

    # Update the model file or create a new one
    $modelFilePath = Join-Path -Path $Path -ChildPath "$($Object.Name).php"
    Set-Content -Path $modelFilePath -Value $content
}

Function Initialize-Migration {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Specify the name of the migration.")]
        [string]$Name,
        [Parameter(Mandatory = $true, HelpMessage = "Specify the table to be created.")]
        [string]$CreateTable,
        [Parameter(Mandatory = $true, HelpMessage = "Specify the fields and their types.")]
        [DataField[]]$Fields,
        [string]$Path = "database/migrations"
    )

    $schema = $Fields.ForEach({ $_.GetMigrationSchema() }) -join ' '
    $command = "php artisan make:migration $Name --create=$CreateTable --path=$Path --schema=`"$schema`""
    Invoke-Expression $command
}
Function Initialize-Controller {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Specify the name of the controller.")]
        [string]$Name,
        [switch]$Api,
        [string]$Type,
        [switch]$Force,
        [switch]$Invokable,
        [string]$Model,
        [string]$Parent,
        [switch]$Resource,
        [switch]$Requests,
        [switch]$Singleton,
        [switch]$Creatable,
        [switch]$Test,
        [switch]$Pest,
        [switch]$PhpUnit
    )

    $options = @()
    if ($Api) { $options += "--api" }
    if ($Type) { $options += "--type=$Type" }
    if ($Force) { $options += "--force" }
    if ($Invokable) { $options += "--invokable" }
    if ($Model) { $options += "--model=$Model" }
    if ($Parent) { $options += "--parent=$Parent" }
    if ($Resource) { $options += "--resource" }
    if ($Requests) { $options += "--requests" }
    if ($Singleton) { $options += "--singleton" }
    if ($Creatable) { $options += "--creatable" }
    if ($Test) { $options += "--test" }
    if ($Pest) { $options += "--pest" }
    if ($PhpUnit) { $options += "--phpunit" }

    $command = "php artisan make:controller $Name $options"
    Invoke-Expression $command
}
Function Initialize-DataObject {

    [CmdletBinding()]
    param (
        [string]$Path = ".",
        [Parameter(Mandatory = $true)]
        [DataObject]$Object
    )

    $tableName = $Object.TableName
    $migrationName = "create_${tableName.ToLower()}s_table"

    Set-Location -Path $Path
    Initialize-Model -Name $Object.Name
    Initialize-Migration -Name $migrationName -CreateTable $tableName -Fields $Object.Fields
    Initialize-Controller -Name "${Object.Name}Controller" -Resource -Requests
}
